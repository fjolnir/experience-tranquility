import "HTTPKit"
import "html"

t        = Tag
maxRepls = 10
maxCpu   = 0.05
fontURL  = "http://fonts.googleapis.com/css?family=Oxygen:400,700,300"

replTasks = {}

getRepl = { conn |
    ^nil unless cookie = conn getCookie: #replId

    task = replTasks[cookie]
    if task == nil {
        ^nil if replTasks count >= maxRepls
        task = NSTask new setLaunchPath: #sandbox;
                       setStandardInput: NSPipe new;
                      setStandardOutput: NSPipe new;
                setCurrentDirectoryPath: ".";
                                 launch;
                                   self
        async {
            \ For some reason NSTaskDidTerminateNotification doesn't get sent
            task waitUntilExit
            replTasks[cookie] = nil
        }
        replTasks[cookie] = task
    }
    ^task
}

HTTP new handleGET: "/execute" with: { conn |
    "«conn getCookie: #replId» exec: «conn requestQueryVar: #code»" print
    code = (conn requestQueryVar: #code) + "\n"
    repl = getRepl(conn)

    repl standardInput fileHandleForWriting writeData: (code dataUsingEncoding: NSUTF8StringEncoding)

    resultData = async repl standardOutput fileHandleForReading availableData
    \ Give it 5 seconds to finish
    if wait(5) then
        ^NSString alloc initWithData: resultData encoding: NSUTF8StringEncoding
    else {
        repl terminate
        ^'{"error": "Your program took too long to run, so I killed it."}'
    }
};
handleGET: "/terminate" with: { conn |
    ^nil unless cookie = conn getCookie: #replId
    replTasks[cookie] terminate
};
handleGET: "/" with: { conn |
    unless cookie = conn getCookie: #replId {
        conn setCookie: #replId to: (NSProcessInfo processInfo globallyUniqueString)
    }

    t :#html :[
        t head: [
            t link: fontURL      :{ #rel => #stylesheet, #type => #text/css },
            t link: #"trytq.css" :{ #rel => #stylesheet, #type => #text/css },
            t scriptsrc: #"jquery-1.4.2.min.js",
            t scriptsrc: #"jquery.console.js",
            t scriptsrc: #"trytq.js"
        ],
        t body: [
            #"welcome; here you can try out tranquil.",
            t div: nil :{ #id => #console }
        ]
    ]
};
setPublicDir: #resources;
listenOnPort:8080 onError:{ reason | reason print. ^^1 }

NSRunLoop mainRunLoop runUntilDate: NSDate distantFuture

